{
  "openapi": "3.0.1",
  "info": {
    "title": "Supernormal API",
    "description": "Documentation for the Supernormal API",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.supernormal.com/api/v1"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Agents",
      "description": "Operations about agents"
    },
    {
      "name": "Calendar Events",
      "description": "Operations about calendar"
    },
    {
      "name": "Posts",
      "description": "Operations about posts"
    },
    {
      "name": "Current User",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/user": {
      "get": {
        "tags": ["Current User"],
        "summary": "Get user",
        "security": [
          {
            "ApiKeyAuth": ["user:read"]
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/user/calendar_events": {
      "get": {
        "tags": ["Current User"],
        "summary": "Upcoming calendar events",
        "security": [
          {
            "ApiKeyAuth": ["calendar_events:read"]
          }
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The start date of the calendar events",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date of the calendar events",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar events response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get posts",
        "description": "Returns the current user's posts",
        "security": [
          {
            "ApiKeyAuth": ["posts:read"]
          }
        ],
        "responses": {
          "200": {
            "description": "Posts response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get a post",
        "description": "Returns a specific post",
        "security": [
          {
            "ApiKeyAuth": ["posts:read"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the post to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        }
      }
    },
    "/calendar_events/{id}/record": {
      "post": {
        "tags": ["Calendar Events"],
        "summary": "Toggle recording",
        "description": "Toggles whether a calendar event should be recorded",
        "security": [
          {
            "ApiKeyAuth": ["calendar_events:write"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the calendar event to record",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "query",
            "description": "Whether to record the calendar event",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar event recorded"
          }
        }
      }
    },
    "/agents": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get agents",
        "description": "Returns the current user's agents",
        "security": [
          {
            "ApiKeyAuth": ["agents:read"]
          }
        ],
        "responses": {
          "200": {
            "description": "Agents response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Agents"],
        "summary": "Create an agent",
        "description": "Creates an agent",
        "security": [
          {
            "ApiKeyAuth": ["agents:write"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get an agent",
        "description": "Returns a specific agent",
        "security": [
          {
            "ApiKeyAuth": ["agents:read"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the agent to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{id}/publish": {
      "post": {
        "tags": ["Agents"],
        "summary": "Publish an agent",
        "security": [
          {
            "ApiKeyAuth": ["agents:write"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the agent to publish",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent published"
          }
        }
      }
    },
    "/agents/{id}/unpublish": {
      "post": {
        "tags": ["Agents"],
        "summary": "Unpublish an agent",
        "security": [
          {
            "ApiKeyAuth": ["agents:write"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the agent to unpublish",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent unpublished"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The agent’s ID",
            "type": "string"
          },
          "name": {
            "description": "The agent’s name",
            "type": "string"
          },
          "avatar_url": {
            "description": "The agent’s avatar URL",
            "type": "string"
          },
          "description": {
            "description": "The agent’s description",
            "type": "string"
          }
        }
      },
      "AgentRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "type": "object",
            "properties": {
              "actor_prompt": {
                "type": "string",
                "description": "The agent's actor prompt",
                "enum": [
                  "inbound_sales", "survey", "employee_satisfaction_survey", "customer_satisfaction_survey", "event_feedback_survey", "screening_interview"
                ]
              },
              "actor_voice": {
                "type": "string",
                "description": "The agent's actor voice",
                "enum": ["archer", "christopher", "rachel", "scarlet"]
              },
              "brand_color": {
                "type": "string",
                "description": "The agent's brand color"
              },
              "custom_prompt": {
                "type": "string",
                "description": "The agent's custom prompt"
              },
              "context": {
                "type": "string",
                "description": "The agent's context"
              },
              "greeting_prompt": {
                "type": "string",
                "description": "The agent's greeting prompt"
              },
              "goodbye_prompt": {
                "type": "string",
                "description": "The agent's goodbye prompt"
              },
              "is_host": {
                "type": "boolean",
                "description": "Whether the agent should speak first"
              },
              "mode": {
                "type": "string",
                "description": "The agent's speaking mode",
                "enum": ["single_response", "conversation"]
              },
              "max_call_duration": {
                "type": "integer",
                "description": "The agent's maximum call duration"
              }
            }
          }
        ]
      },
      "CalendarEvent": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The calendar event’s ID",
            "type": "string"
          },
          "name": {
            "description": "The calendar event’s name",
            "type": "string"
          },
          "start": {
            "description": "The calendar event’s start time",
            "type": "string"
          },
          "end": {
            "description": "The calendar event’s end time",
            "type": "string"
          },
          "platform_name": {
            "description": "The calendar event’s platform name",
            "type": "string",
            "enum": ["google_meet", "teams", "zoom"]
          },
          "scheduled_to_record": {
            "description": "Whether the calendar event is scheduled to record",
            "type": "boolean"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The post’s ID",
            "type": "string"
          },
          "title": {
            "description": "The post’s title",
            "type": "string"
          },
          "published_at": {
            "description": "The post’s published at time",
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The user’s ID",
            "type": "string"
          },
          "first_name": {
            "description": "The user’s first name",
            "type": "string"
          },
          "last_name": {
            "description": "The user’s last name",
            "type": "string"
          },
          "email": {
            "description": "The user’s email",
            "type": "string"
          },
          "avatar_url": {
            "description": "The user’s avatar URL",
            "type": "string"
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-TOKEN",
        "x-scopes": {
          "user:read": "Read user information",
          "calendar_events:read": "Read calendar events",
          "calendar_events:write": "Write calendar events"
        }
      }
    }
  }
}
